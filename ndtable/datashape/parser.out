Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> lhs_expression EQUALS rhs_expression
Rule 2     statement -> rhs_expression
Rule 3     lhs_expression -> lhs_expression SPACE lhs_expression
Rule 4     lhs_expression -> NAME
Rule 5     rhs_expression -> rhs_expression COMMA rhs_expression
Rule 6     rhs_expression -> record
Rule 7     rhs_expression -> NAME
Rule 8     rhs_expression -> NUMBER
Rule 9     record -> LBRACE record_opt RBRACE
Rule 10    record_opt -> record_opt COMMA record_opt
Rule 11    record_opt -> record_item
Rule 12    record_opt -> empty
Rule 13    record_item -> NAME COLON ( rhs_expression )
Rule 14    record_item -> NAME COLON NAME
Rule 15    record_item -> NAME COLON NUMBER
Rule 16    empty -> <empty>

Terminals, with rules where they appear

(                    : 13
)                    : 13
COLON                : 13 14 15
COMMA                : 5 10
EQUALS               : 1
LBRACE               : 9
NAME                 : 4 7 13 14 14 15
NUMBER               : 8 15
RBRACE               : 9
SPACE                : 3
error                : 

Nonterminals, with rules where they appear

empty                : 12
lhs_expression       : 1 3 3
record               : 6
record_item          : 11
record_opt           : 9 10 10
rhs_expression       : 1 2 5 5 13
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . lhs_expression EQUALS rhs_expression
    (2) statement -> . rhs_expression
    (3) lhs_expression -> . lhs_expression SPACE lhs_expression
    (4) lhs_expression -> . NAME
    (5) rhs_expression -> . rhs_expression COMMA rhs_expression
    (6) rhs_expression -> . record
    (7) rhs_expression -> . NAME
    (8) rhs_expression -> . NUMBER
    (9) record -> . LBRACE record_opt RBRACE

    NAME            shift and go to state 3
    NUMBER          shift and go to state 5
    LBRACE          shift and go to state 1

    record                         shift and go to state 6
    lhs_expression                 shift and go to state 4
    rhs_expression                 shift and go to state 2
    statement                      shift and go to state 7

state 1

    (9) record -> LBRACE . record_opt RBRACE
    (10) record_opt -> . record_opt COMMA record_opt
    (11) record_opt -> . record_item
    (12) record_opt -> . empty
    (13) record_item -> . NAME COLON ( rhs_expression )
    (14) record_item -> . NAME COLON NAME
    (15) record_item -> . NAME COLON NUMBER
    (16) empty -> .

    NAME            shift and go to state 11
    RBRACE          reduce using rule 16 (empty -> .)
    COMMA           reduce using rule 16 (empty -> .)

    record_item                    shift and go to state 9
    empty                          shift and go to state 10
    record_opt                     shift and go to state 8

state 2

    (2) statement -> rhs_expression .
    (5) rhs_expression -> rhs_expression . COMMA rhs_expression

    $end            reduce using rule 2 (statement -> rhs_expression .)
    COMMA           shift and go to state 12


state 3

    (4) lhs_expression -> NAME .
    (7) rhs_expression -> NAME .

    EQUALS          reduce using rule 4 (lhs_expression -> NAME .)
    SPACE           reduce using rule 4 (lhs_expression -> NAME .)
    COMMA           reduce using rule 7 (rhs_expression -> NAME .)
    $end            reduce using rule 7 (rhs_expression -> NAME .)


state 4

    (1) statement -> lhs_expression . EQUALS rhs_expression
    (3) lhs_expression -> lhs_expression . SPACE lhs_expression

    EQUALS          shift and go to state 13
    SPACE           shift and go to state 14


state 5

    (8) rhs_expression -> NUMBER .

    )               reduce using rule 8 (rhs_expression -> NUMBER .)
    COMMA           reduce using rule 8 (rhs_expression -> NUMBER .)
    $end            reduce using rule 8 (rhs_expression -> NUMBER .)


state 6

    (6) rhs_expression -> record .

    )               reduce using rule 6 (rhs_expression -> record .)
    COMMA           reduce using rule 6 (rhs_expression -> record .)
    $end            reduce using rule 6 (rhs_expression -> record .)


state 7

    (0) S' -> statement .



state 8

    (9) record -> LBRACE record_opt . RBRACE
    (10) record_opt -> record_opt . COMMA record_opt

    RBRACE          shift and go to state 16
    COMMA           shift and go to state 15


state 9

    (11) record_opt -> record_item .

    RBRACE          reduce using rule 11 (record_opt -> record_item .)
    COMMA           reduce using rule 11 (record_opt -> record_item .)


state 10

    (12) record_opt -> empty .

    RBRACE          reduce using rule 12 (record_opt -> empty .)
    COMMA           reduce using rule 12 (record_opt -> empty .)


state 11

    (13) record_item -> NAME . COLON ( rhs_expression )
    (14) record_item -> NAME . COLON NAME
    (15) record_item -> NAME . COLON NUMBER

    COLON           shift and go to state 17


state 12

    (5) rhs_expression -> rhs_expression COMMA . rhs_expression
    (5) rhs_expression -> . rhs_expression COMMA rhs_expression
    (6) rhs_expression -> . record
    (7) rhs_expression -> . NAME
    (8) rhs_expression -> . NUMBER
    (9) record -> . LBRACE record_opt RBRACE

    NAME            shift and go to state 19
    NUMBER          shift and go to state 5
    LBRACE          shift and go to state 1

    record                         shift and go to state 6
    rhs_expression                 shift and go to state 18

state 13

    (1) statement -> lhs_expression EQUALS . rhs_expression
    (5) rhs_expression -> . rhs_expression COMMA rhs_expression
    (6) rhs_expression -> . record
    (7) rhs_expression -> . NAME
    (8) rhs_expression -> . NUMBER
    (9) record -> . LBRACE record_opt RBRACE

    NAME            shift and go to state 19
    NUMBER          shift and go to state 5
    LBRACE          shift and go to state 1

    record                         shift and go to state 6
    rhs_expression                 shift and go to state 20

state 14

    (3) lhs_expression -> lhs_expression SPACE . lhs_expression
    (3) lhs_expression -> . lhs_expression SPACE lhs_expression
    (4) lhs_expression -> . NAME

    NAME            shift and go to state 22

    lhs_expression                 shift and go to state 21

state 15

    (10) record_opt -> record_opt COMMA . record_opt
    (10) record_opt -> . record_opt COMMA record_opt
    (11) record_opt -> . record_item
    (12) record_opt -> . empty
    (13) record_item -> . NAME COLON ( rhs_expression )
    (14) record_item -> . NAME COLON NAME
    (15) record_item -> . NAME COLON NUMBER
    (16) empty -> .

    NAME            shift and go to state 11
    COMMA           reduce using rule 16 (empty -> .)
    RBRACE          reduce using rule 16 (empty -> .)

    record_item                    shift and go to state 9
    empty                          shift and go to state 10
    record_opt                     shift and go to state 23

state 16

    (9) record -> LBRACE record_opt RBRACE .

    )               reduce using rule 9 (record -> LBRACE record_opt RBRACE .)
    COMMA           reduce using rule 9 (record -> LBRACE record_opt RBRACE .)
    $end            reduce using rule 9 (record -> LBRACE record_opt RBRACE .)


state 17

    (13) record_item -> NAME COLON . ( rhs_expression )
    (14) record_item -> NAME COLON . NAME
    (15) record_item -> NAME COLON . NUMBER

    (               shift and go to state 25
    NAME            shift and go to state 24
    NUMBER          shift and go to state 26


state 18

    (5) rhs_expression -> rhs_expression COMMA rhs_expression .
    (5) rhs_expression -> rhs_expression . COMMA rhs_expression

    )               reduce using rule 5 (rhs_expression -> rhs_expression COMMA rhs_expression .)
    $end            reduce using rule 5 (rhs_expression -> rhs_expression COMMA rhs_expression .)
    COMMA           shift and go to state 12

  ! COMMA           [ reduce using rule 5 (rhs_expression -> rhs_expression COMMA rhs_expression .) ]


state 19

    (7) rhs_expression -> NAME .

    )               reduce using rule 7 (rhs_expression -> NAME .)
    COMMA           reduce using rule 7 (rhs_expression -> NAME .)
    $end            reduce using rule 7 (rhs_expression -> NAME .)


state 20

    (1) statement -> lhs_expression EQUALS rhs_expression .
    (5) rhs_expression -> rhs_expression . COMMA rhs_expression

    $end            reduce using rule 1 (statement -> lhs_expression EQUALS rhs_expression .)
    COMMA           shift and go to state 12


state 21

    (3) lhs_expression -> lhs_expression SPACE lhs_expression .
    (3) lhs_expression -> lhs_expression . SPACE lhs_expression

    SPACE           reduce using rule 3 (lhs_expression -> lhs_expression SPACE lhs_expression .)
    EQUALS          reduce using rule 3 (lhs_expression -> lhs_expression SPACE lhs_expression .)

  ! SPACE           [ shift and go to state 14 ]


state 22

    (4) lhs_expression -> NAME .

    SPACE           reduce using rule 4 (lhs_expression -> NAME .)
    EQUALS          reduce using rule 4 (lhs_expression -> NAME .)


state 23

    (10) record_opt -> record_opt COMMA record_opt .
    (10) record_opt -> record_opt . COMMA record_opt

    RBRACE          reduce using rule 10 (record_opt -> record_opt COMMA record_opt .)
    COMMA           shift and go to state 15

  ! COMMA           [ reduce using rule 10 (record_opt -> record_opt COMMA record_opt .) ]


state 24

    (14) record_item -> NAME COLON NAME .

    COMMA           reduce using rule 14 (record_item -> NAME COLON NAME .)
    RBRACE          reduce using rule 14 (record_item -> NAME COLON NAME .)


state 25

    (13) record_item -> NAME COLON ( . rhs_expression )
    (5) rhs_expression -> . rhs_expression COMMA rhs_expression
    (6) rhs_expression -> . record
    (7) rhs_expression -> . NAME
    (8) rhs_expression -> . NUMBER
    (9) record -> . LBRACE record_opt RBRACE

    NAME            shift and go to state 19
    NUMBER          shift and go to state 5
    LBRACE          shift and go to state 1

    record                         shift and go to state 6
    rhs_expression                 shift and go to state 27

state 26

    (15) record_item -> NAME COLON NUMBER .

    COMMA           reduce using rule 15 (record_item -> NAME COLON NUMBER .)
    RBRACE          reduce using rule 15 (record_item -> NAME COLON NUMBER .)


state 27

    (13) record_item -> NAME COLON ( rhs_expression . )
    (5) rhs_expression -> rhs_expression . COMMA rhs_expression

    )               shift and go to state 28
    COMMA           shift and go to state 12


state 28

    (13) record_item -> NAME COLON ( rhs_expression ) .

    COMMA           reduce using rule 13 (record_item -> NAME COLON ( rhs_expression ) .)
    RBRACE          reduce using rule 13 (record_item -> NAME COLON ( rhs_expression ) .)

