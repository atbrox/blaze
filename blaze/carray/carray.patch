diff --git a/blaze/carray/carrayExtension.pyx b/blaze/carray/carrayExtension.pyx
index 941861e..bcf46dc 100644
--- a/blaze/carray/carrayExtension.pyx
+++ b/blaze/carray/carrayExtension.pyx
@@ -9,8 +9,8 @@
 
 import sys
 import numpy as np
-import carray as ca
-from carray import utils, attrs, array2string
+import blaze.carray as ca
+from blaze.carray import utils, attrs, array2string
 import os, os.path
 import struct
 import shutil
@@ -53,7 +53,7 @@ from definitions cimport import_array, ndarray, dtype, \
      PyString_FromStringAndSize, \
      Py_BEGIN_ALLOW_THREADS, Py_END_ALLOW_THREADS, \
      PyArray_GETITEM, PyArray_SETITEM, \
-     npy_intp
+     npy_intp, PyBuffer_FromMemory, Py_uintptr_t
 
 #-----------------------------------------------------------------
 
@@ -207,8 +207,8 @@ cdef class chunk:
 
   # To save space, keep these variables under a minimum
   cdef char typekind, isconstant
-  cdef int atomsize, itemsize, blocksize
-  cdef int nbytes, cbytes, cdbytes
+  cdef public int atomsize, itemsize, blocksize
+  cdef public int nbytes, cbytes, cdbytes
   cdef int true_count
   cdef char *data
   cdef object atom, constant, dobject
@@ -386,6 +386,21 @@ cdef class chunk:
       return array[::step]
     return array
 
+  @property
+  def pointer(self):
+      if self.memory:
+          return <Py_uintptr_t> self.data+BLOSCPACK_HEADER_LENGTH
+      else:
+          raise RuntimeError("Not in memory")
+
+  @property
+  def viewof(self):
+      if self.memory:
+          return PyBuffer_FromMemory(<void*>self.data, <Py_ssize_t>self.cdbytes)
+      else:
+          raise RuntimeError("Not in memory")
+
+
   def __setitem__(self, object key, object value):
     """__setitem__(self, key, value) -> None."""
     raise NotImplementedError
@@ -716,6 +731,24 @@ cdef class carray:
   cdef ndarray blockcache
   cdef char *datacache
 
+  property leftovers:
+    def __get__(self):
+      # Pointer to the leftovers chunk
+      return self.lastchunkarr.ctypes.data
+
+  property nchunks:
+    def __get__(self):
+      # TODO: do we need to handle the last chunk specially?
+      return cython.cdiv(self._nbytes, <npy_intp>self._chunksize)
+
+  property partitions:
+    def __get__(self):
+      # Return a sequence of tuples indicating the bounds
+      # of each of the chunks.
+      nchunks = cython.cdiv(self._nbytes, <npy_intp>self._chunksize)
+      chunklen = cython.cdiv(self._chunksize, self.atomsize)
+      return [(i*chunklen,(i+1)*chunklen) for i in xrange(nchunks)]
+
   property attrs:
     "The attribute accessor."
     def __get__(self):
diff --git a/blaze/carray/defaults.py b/blaze/carray/defaults.py
index 8b1d159..d67d55d 100644
--- a/blaze/carray/defaults.py
+++ b/blaze/carray/defaults.py
@@ -13,7 +13,7 @@ Feel free to change them for better adapting to your needs.
 
 """
 
-import carray as ca
+import blaze.carray as ca
 
 
 class Defaults(object):
diff --git a/blaze/carray/definitions.pxd b/blaze/carray/definitions.pxd
index fb3c467..462630c 100644
--- a/blaze/carray/definitions.pxd
+++ b/blaze/carray/definitions.pxd
@@ -87,6 +87,8 @@ cdef extern from "Python.h":
   # Functions for buffers
   object PyBuffer_FromMemory(void *ptr, Py_ssize_t size)
 
+  ctypedef unsigned int Py_uintptr_t
+
 
 #-----------------------------------------------------------------------------
 
diff --git a/blaze/carray/toplevel.py b/blaze/carray/toplevel.py
index be57558..ff06938 100644
--- a/blaze/carray/toplevel.py
+++ b/blaze/carray/toplevel.py
@@ -14,7 +14,7 @@ import os, os.path
 import glob
 import itertools as it
 import numpy as np
-import carray as ca
+#import blaze.carray as ca
 import math
 
 def detect_number_of_cores():
@@ -712,7 +712,7 @@ class cparams(object):
             raise ValueError, "`shuffle` must a boolean."
         shuffle = bool(shuffle)
         if clevel < 0:
-            raiseValueError, "clevel must be a positive integer"
+            raise ValueError, "clevel must be a positive integer"
         self._clevel = clevel
         self._shuffle = shuffle
